#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import sys, os
import argparse, fileinput
import numpy as np

import matplotlib
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

from sklearn import cluster
import pickle



# load stream
def load(stream):
    labels = list()
    features_l = list()
    num_features = 0

    for line in fileinput.input(stream, bufsize=1000):
        line = line.strip()
        line = line.strip('\n')

        # skip empty and comment lines
        if line == "":
            continue
        if line[0] == '#':
            #print(line)
            continue

        fields = line.split()
        if len(fields) < 2:
            print("no features? |", fields)
            quit()

        if not num_features:
            num_features = len(fields[1:])
        elif len(fields[1:]) != num_features:
            print("incorrect number of features:", len(fields[1:]), "!=", num_features, "|", fields)
            quit()

        labels.append(fields[0])
        features_l.append([ float(x) for x in fields[1:] ])

    return labels, np.array(features_l)



# output graphs showing the results of the last fitting of the given estimator
def graph_result(estimator, labels, features):
    ulabels, ilabels = list(), list()
    for i in labels:
        if ulabels.count(i) == 0:
            ulabels.append(i)
    for i in labels:
        ilabels.append(ulabels.index(i))

    print("samples:", len(labels))
    print("uniques:", len(ulabels))
    print("estimator:", estimator)

    centers = estimator.cluster_centers_

    fig = plt.figure(1, figsize=(20,12))
    fig.clf()
    fig.canvas.set_window_title('train-sklearn: ' + str(estimator)[:str(estimator).find("(")])

    ax = fig.add_subplot(2,3,1)
    ax.scatter(features[:,0], features[:,1], c=ilabels, cmap=plt.get_cmap('gist_rainbow'))
    ax.scatter(centers[:,0], centers[:,1], marker='x', color='r', s=150, linewidths=2)
    ax.set_title('X-Y')
    ax.set_xlabel('X')
    ax.set_ylabel('Y')

    ax = fig.add_subplot(2,3,2)
    ax.scatter(features[:,0], features[:,2], c=ilabels, cmap=plt.get_cmap('gist_rainbow'))
    ax.scatter(centers[:,0], centers[:,2], marker='x', color='r', s=150, linewidths=2)
    ax.set_title('X-Z')
    ax.set_xlabel('X')
    ax.set_ylabel('Z')

    ax = fig.add_subplot(2,3,3)
    ax.scatter(features[:,1], features[:,2], c=ilabels, cmap=plt.get_cmap('gist_rainbow'))
    ax.scatter(centers[:,1], centers[:,2], marker='x', color='r', s=150, linewidths=2)
    ax.set_title('Y-Z')
    ax.set_xlabel('Y')
    ax.set_ylabel('Z')

    ax = fig.add_subplot(2,3,5, projection='3d')
    ax.scatter(features[:,0], features[:,1], features[:,2], c=ilabels, cmap=plt.get_cmap('gist_rainbow'))
    ax.scatter(centers[:,0], centers[:,1], centers[:,2], marker='x', color='r', s=150, linewidths=2)
    ax.set_title('X-Y-Z')
    ax.set_xlabel('X')
    ax.set_ylabel('Y')
    ax.set_zlabel('Z')

    plt.show()



# helper to print dictionaries somewhat readable
def print_dict(header, d, *args):
    pad_text = len(max(list(d.keys()), key=len)) # longest string
    print(header)
    for i in sorted(d.keys()):
        print("  ", '{:<{}}'.format(i, pad_text), "   ", d[i], sep='')
    for i in args:
        print(i)





if __name__=="__main__":
    class Formatter(argparse.ArgumentDefaultsHelpFormatter, argparse.RawTextHelpFormatter): pass
    cmdline = argparse.ArgumentParser(description="Unsupervised clustering algorithms from scikit-learn\n[predict module]", epilog="Default output: prediction stream with labels and predictions", formatter_class=Formatter)

    cmdline.add_argument('estimator', metavar='ESTIMATOR', type=argparse.FileType('rb'), nargs='?', default='-', help="estimator dump, filename or stdin\n")
    cmdline.add_argument('samples', metavar='SAMPLES', type=str, nargs='?', default='-', help="sample stream, format: [label] [[features]]\n")
    cmdline.add_argument('-g', '--graph', help='graph results of estimator fitting\n', action='store_true')
    cmdline.add_argument('-i', '--info', help='print estimator info and quit\n', action='store_true')

    args = cmdline.parse_args()

    if args.estimator == None:
        cmdline.print_help()
        quit()

    # get the estimator, if estimator FileType reset to not binary, source is stdin
    if args.estimator.mode == 'r':
        size = int(args.estimator.readline())
        estimator = pickle.loads(args.estimator.read(size-33).encode('latin-1')) # TODO: -33 because sizeof in train is not accurate 
    else:
        estimator = pickle.load(args.estimator)

    if args.info:
        print(estimator)
        quit()

    # load sample stream and fill label and feature containers
    labels, features = load(args.samples)

    if len(labels) == 0:
        print("no samples loaded")
        quit()

    # fit model
    pred = estimator.predict(features)

    # graph
    if args.graph:
        graph_result(estimator, labels, features)
        quit()

    for i in range(0, len(labels)):
        print(labels[i], pred[i], sep='\t')





